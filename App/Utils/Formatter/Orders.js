const OrdersFormatter = {
  getOrders: (_) => {
    return {
      next: _.next,
      previous: _.previous,
      count: _.count,
      limit: _.limit,
      results: _.results.map((res) => {
        return {
          number: res.number,
          basket: res.basket,
          url: res.url,
          owner: res.owner,
          currency: res.currency,
          totalInTax: res.total_incl_tax,
          totalExTax: res.total_excl_tax,
          totalTax: res.total_tax,
          shippingInTax: res.shipping_incl_tax,
          shippingExTax: res.shipping_excl_tax,
          shippingMethod: res.shipping_method,
          shippingCode: res.shipping_code,
          status: res.status,
          email: res.email,
          datePlaced: res.date_placed,
          paymentUrl: res.payment_url,
          offerDiscounts: res.offer_discounts,
          voucherDiscounts: res.voucher_discounts,
          surcharges: res.surcharges,
          partner: res.partner,
          remaining_time: res.remaining_time,
          total_stages: res.total_stages,
          stage: res.stage,
          title: res.title,
          subtitle: res.subtitle,
          image: res.image,
          billingAddress: {
            id: res.billing_address?.id,
            country: res.billing_address?.country,
            title: res.billing_address?.title,
            firstName: res.billing_address?.first_name,
            lastName: res.billing_address?.last_name,
            line1: res.billing_address?.line1,
            line2: res.billing_address?.line2,
            line3: res.billing_address?.line3,
            line4: res.billing_address?.line4,
            state: res.billing_address?.state,
            postcode: res.billing_address?.postcode,
            searchText: res.billing_address?.search_text,
            place: res.billing_address?.place,
            placeId: res.billing_address?.place_id,
            location: res.billing_address?.location,
          },
          shippingAddress: {
            id: res.shipping_address?.id,
            country: res.shipping_address?.country,
            title: res.shipping_address?.title,
            firstName: res.shipping_address?.first_name,
            lastName: res.shipping_address?.last_name,
            line1: res.shipping_address?.line1,
            line2: res.shipping_address?.line2,
            line3: res.shipping_address?.line3,
            line4: res.shipping_address?.line4,
            state: res.shipping_address?.state,
            postcode: res.shipping_address?.postcode,
            searchText: res.shipping_address?.search_text,
            place: res.shipping_address?.place,
            placeId: res.shipping_address?.place_id,
            phoneNumber: res.shipping_address?.phone_number,
            notes: res.shipping_address?.notes,
            location: res.shipping_address?.location,
          }, //
          lines: res.lines.map((line) => {
            return {
              url: line.url,
              order: line.order,
              quantity: line.quantity,
              attributes: line.attributes,
              priceCurrency: line.price_currency,
              priceExTax: parseFloat(line.price_excl_tax).toFixed(2),
              priceInTax: parseFloat(line.price_incl_tax).toFixed(2),
              priceInTaxExDiscounts: parseFloat(
                line.price_incl_tax_excl_discounts,
              ).toFixed(2),
              priceExTaxExDiscounts: parseFloat(
                line.price_excl_tax_excl_discounts,
              ).toFixed(2),
              stockRecord: line.stockrecord,
              modifiers: line.modifiers,
              product: {
                id: line.product?.id,
                productClass: line.product?.product_class,
                stockRecords: line.product?.stockrecords,
                slug: line.product?.slug,
                isPublic: line.product?.is_public,
                metaTitle: line.product?.meta_title,
                metaDescription: line.product?.meta_description,
                rating: line.product?.rating,
                dateCreated: line.product?.date_created,
                dateUpdated: line.product?.date_updated,
                isDiscountable: line.product?.is_discountable,
                parent: line.product?.parent,
                url: line.product?.url,
                upc: line.product?.upc,
                title: line.product?.title,
                description: line.product?.description,
                categories: line.product?.categories,
                structure: line.product?.structure,
                recommendedProducts: line.product?.recommended_products,
                children: line.product?.children,
                attributes: line.product?.attributes,
                options: line.product?.options,
                images: line.product?.images.map((image) => {
                  return {
                    id: image?.id,
                    original: image?.original,
                    caption: image?.caption,
                    displayOrder: image?.display_order,
                    dateCreated: image?.date_created,
                  };
                }),
              },
            };
          }),
        };
      }),
    };
  },
};

// Export
export default OrdersFormatter;
